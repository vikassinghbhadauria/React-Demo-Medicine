{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Ravi/Desktop/Self Learning/Medicine/01-starting-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Ravi/Desktop/Self Learning/Medicine/01-starting-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/Ravi/Desktop/Self Learning/Medicine/01-starting-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import classes from'./AvailableMedicine.module.css';import MedicineItem from'./MedicineItem/MedicineItem';import Card from'../UI/Card';import{jsx as _jsx}from\"react/jsx-runtime\";var AvailableMedicine=function AvailableMedicine(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),medicine=_useState2[0],setMedicine=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),isError=_useState6[0],setIsError=_useState6[1];useEffect(function(){var fetchMedicine=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,responseData,loadedMedicine,key;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('https://medicinedatamart-default-rtdb.firebaseio.com/medicine.json');case 2:response=_context.sent;if(response.ok){_context.next=5;break;}throw new Error('something went wrong in fetch request');case 5:_context.next=7;return response.json();case 7:responseData=_context.sent;loadedMedicine=[];for(key in responseData){loadedMedicine.push({id:key,name:responseData[key].name,description:responseData[key].description,price:responseData[key].price});}setMedicine(loadedMedicine);setIsLoading(false);case 12:case\"end\":return _context.stop();}}},_callee);}));return function fetchMedicine(){return _ref.apply(this,arguments);};}();fetchMedicine().catch(function(error){setIsLoading(false);setIsError(error.message);});},[]);if(isLoading){return/*#__PURE__*/_jsx(\"section\",{className:classes.medicineloading,children:/*#__PURE__*/_jsx(\"p\",{children:\"....Loading\"})});}if(isError){return/*#__PURE__*/_jsx(\"section\",{className:classes.medicineerror,children:/*#__PURE__*/_jsx(\"p\",{children:isError})});}var medicineList=medicine.map(function(medicine){return/*#__PURE__*/_jsx(MedicineItem,{id:medicine.id,name:medicine.name,description:medicine.description,price:medicine.price},medicine.id);});return/*#__PURE__*/_jsx(\"section\",{className:classes.medicine,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(\"ul\",{children:medicineList})})});};export default AvailableMedicine;","map":{"version":3,"sources":["C:/Users/Ravi/Desktop/Self Learning/Medicine/01-starting-project/src/components/Medicine/AvailableMedicine.js"],"names":["useEffect","useState","classes","MedicineItem","Card","AvailableMedicine","medicine","setMedicine","isLoading","setIsLoading","isError","setIsError","fetchMedicine","fetch","response","ok","Error","json","responseData","loadedMedicine","key","push","id","name","description","price","catch","error","message","medicineloading","medicineerror","medicineList","map"],"mappings":"kiBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,MAAOC,CAAAA,OAAP,KAAoB,gCAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,6BAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,C,2CAGE,GAAMC,CAAAA,iBAAiB,CAAE,QAAnBA,CAAAA,iBAAmB,EAAI,CAC3B,cAA8BJ,QAAQ,CAAC,EAAD,CAAtC,wCAAOK,QAAP,eAAiBC,WAAjB,eACA,eAAiCN,QAAQ,CAAC,IAAD,CAAzC,yCAAOO,SAAP,eAAkBC,YAAlB,eACA,eAA6BR,QAAQ,EAArC,yCAAOS,OAAP,eAAgBC,UAAhB,eAEAX,SAAS,CAAC,UAAI,CACZ,GAAMY,CAAAA,aAAa,0FAAG,sMAEGC,CAAAA,KAAK,CAAC,oEAAD,CAFR,QAEdC,QAFc,kBAIhBA,QAAQ,CAACC,EAJO,8BAKZ,IAAIC,CAAAA,KAAJ,CAAU,uCAAV,CALY,8BAOOF,CAAAA,QAAQ,CAACG,IAAT,EAPP,QAOdC,YAPc,eASdC,cATc,CASG,EATH,CAUpB,IAAWC,GAAX,GAAkBF,CAAAA,YAAlB,CAA+B,CAC7BC,cAAc,CAACE,IAAf,CAAoB,CAClBC,EAAE,CAACF,GADe,CAElBG,IAAI,CAAEL,YAAY,CAACE,GAAD,CAAZ,CAAkBG,IAFN,CAGlBC,WAAW,CAAGN,YAAY,CAACE,GAAD,CAAZ,CAAkBI,WAHd,CAIlBC,KAAK,CAAEP,YAAY,CAACE,GAAD,CAAZ,CAAkBK,KAJP,CAApB,EAMD,CACDlB,WAAW,CAACY,cAAD,CAAX,CACAV,YAAY,CAAC,KAAD,CAAZ,CAnBoB,uDAAH,kBAAbG,CAAAA,aAAa,0CAAnB,CAsBAA,aAAa,GAAGc,KAAhB,CAAsB,SAACC,KAAD,CAAW,CAC/BlB,YAAY,CAAC,KAAD,CAAZ,CACDE,UAAU,CAACgB,KAAK,CAACC,OAAP,CAAV,CACA,CAHD,EAKD,CA5BQ,CA4BP,EA5BO,CAAT,CA8BA,GAAIpB,SAAJ,CAAc,CACZ,mBAAO,gBAAS,SAAS,CAAEN,OAAO,CAAC2B,eAA5B,uBACL,kCADK,EAAP,CAGD,CAED,GAAInB,OAAJ,CAAY,CACV,mBAAO,gBAAS,SAAS,CAAER,OAAO,CAAC4B,aAA5B,uBACL,mBAAIpB,OAAJ,EADK,EAAP,CAGD,CAEC,GAAMqB,CAAAA,YAAY,CAAGzB,QAAQ,CAAC0B,GAAT,CAAa,SAAA1B,QAAQ,qBAC1C,KAAC,YAAD,EACE,EAAE,CAAEA,QAAQ,CAACgB,EADf,CAGE,IAAI,CAAEhB,QAAQ,CAACiB,IAHjB,CAIE,WAAW,CAAEjB,QAAQ,CAACkB,WAJxB,CAKE,KAAK,CAAElB,QAAQ,CAACmB,KALlB,EAEOnB,QAAQ,CAACgB,EAFhB,CAD0C,EAArB,CAArB,CAUA,mBACI,gBAAS,SAAS,CAAEpB,OAAO,CAACI,QAA5B,uBACI,KAAC,IAAD,wBACA,oBAAKyB,YAAL,EADA,EADJ,EADJ,CAOH,CAhED,CAkEA,cAAe1B,CAAAA,iBAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport classes from './AvailableMedicine.module.css';\r\nimport MedicineItem from './MedicineItem/MedicineItem';\r\nimport Card from '../UI/Card';\r\n\r\n\r\n  const AvailableMedicine =()=>{\r\n    const [medicine, setMedicine]=useState([]);\r\n    const [isLoading, setIsLoading] =useState(true);\r\n    const [isError, setIsError] =useState();\r\n\r\n    useEffect(()=>{\r\n      const fetchMedicine = async ()=>{\r\n        \r\n        const response = await fetch('https://medicinedatamart-default-rtdb.firebaseio.com/medicine.json');\r\n        \r\n        if(!response.ok){\r\n          throw new Error('something went wrong in fetch request');\r\n        }\r\n        const responseData = await response.json();\r\n\r\n        const loadedMedicine = [];\r\n        for (const key in responseData){\r\n          loadedMedicine.push({\r\n            id:key,\r\n            name: responseData[key].name,\r\n            description : responseData[key].description,\r\n            price: responseData[key].price\r\n          });\r\n        }\r\n        setMedicine(loadedMedicine);\r\n        setIsLoading(false);\r\n      };\r\n     \r\n      fetchMedicine().catch((error) => {\r\n        setIsLoading(false);\r\n       setIsError(error.message);\r\n      });\r\n      \r\n    },[]);\r\n\r\n    if (isLoading){\r\n      return <section className={classes.medicineloading}>\r\n        <p>....Loading</p>\r\n      </section>\r\n    }\r\n\r\n    if (isError){\r\n      return <section className={classes.medicineerror}>\r\n        <p>{isError}</p>\r\n        </section>\r\n    }\r\n\r\n      const medicineList = medicine.map(medicine => (\r\n      <MedicineItem \r\n        id={medicine.id}\r\n        key={medicine.id} \r\n        name={medicine.name} \r\n        description={medicine.description}\r\n        price={medicine.price}\r\n        />\r\n        ));\r\n\r\n      return(\r\n          <section className={classes.medicine}>\r\n              <Card>\r\n              <ul>{medicineList}</ul>\r\n              </Card>\r\n          </section>\r\n      );\r\n  }\r\n\r\n  export default AvailableMedicine;"]},"metadata":{},"sourceType":"module"}
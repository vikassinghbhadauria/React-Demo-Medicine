{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ravi\\\\Desktop\\\\Self Learning\\\\Medicine\\\\01-starting-project\\\\src\\\\components\\\\Medicine\\\\AvailableMedicine.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport classes from './AvailableMedicine.module.css';\nimport MedicineItem from './MedicineItem/MedicineItem';\nimport Card from '../UI/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMedicine = () => {\n  _s();\n\n  const [medicine, setMedicine] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState();\n  useEffect(() => {\n    const fetchMedicine = async () => {\n      const response = await fetch('https://medicinedatamart-default-rtdb.firebaseio.com/medicine.json');\n\n      if (!response.ok) {\n        throw 'something went wrong in fetch request';\n      }\n\n      const responseData = await response.json();\n      const loadedMedicine = [];\n\n      for (const key in responseData) {\n        loadedMedicine.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      setMedicine(loadedMedicine);\n      setIsLoading(false);\n    };\n\n    fetchMedicine().catch(error => {\n      setIsLoading(false);\n      setIsError(error.message);\n    });\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.medicineloading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"....Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 14\n    }, this);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.medicineerror,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 14\n    }, this);\n  }\n\n  const medicineList = medicine.map(medicine => /*#__PURE__*/_jsxDEV(MedicineItem, {\n    id: medicine.id,\n    name: medicine.name,\n    description: medicine.description,\n    price: medicine.price\n  }, medicine.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.medicine,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: medicineList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 11\n  }, this);\n};\n\n_s(AvailableMedicine, \"H3i24rFcvlIUvoMLlNVDbceqJEA=\");\n\n_c = AvailableMedicine;\nexport default AvailableMedicine;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMedicine\");","map":{"version":3,"sources":["C:/Users/Ravi/Desktop/Self Learning/Medicine/01-starting-project/src/components/Medicine/AvailableMedicine.js"],"names":["useEffect","useState","classes","MedicineItem","Card","AvailableMedicine","medicine","setMedicine","isLoading","setIsLoading","isError","setIsError","fetchMedicine","response","fetch","ok","responseData","json","loadedMedicine","key","push","id","name","description","price","catch","error","message","medicineloading","medicineerror","medicineList","map"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;;AAGE,MAAMC,iBAAiB,GAAE,MAAI;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA2BR,QAAQ,CAAC,IAAD,CAAzC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAuBV,QAAQ,EAArC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMY,aAAa,GAAG,YAAU;AAE9B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAD,CAA5B;;AAEA,UAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;AACd,cAAM,uCAAN;AACD;;AACD,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AAEA,YAAMC,cAAc,GAAG,EAAvB;;AACA,WAAK,MAAMC,GAAX,IAAkBH,YAAlB,EAA+B;AAC7BE,QAAAA,cAAc,CAACE,IAAf,CAAoB;AAClBC,UAAAA,EAAE,EAACF,GADe;AAElBG,UAAAA,IAAI,EAAEN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,IAFN;AAGlBC,UAAAA,WAAW,EAAGP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,WAHd;AAIlBC,UAAAA,KAAK,EAAER,YAAY,CAACG,GAAD,CAAZ,CAAkBK;AAJP,SAApB;AAMD;;AACDjB,MAAAA,WAAW,CAACW,cAAD,CAAX;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KApBD;;AAsBAG,IAAAA,aAAa,GAAGa,KAAhB,CAAuBC,KAAD,IAAW;AAC/BjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACDE,MAAAA,UAAU,CAACe,KAAK,CAACC,OAAP,CAAV;AACA,KAHD;AAKD,GA5BQ,EA4BP,EA5BO,CAAT;;AA8BA,MAAInB,SAAJ,EAAc;AACZ,wBAAO;AAAS,MAAA,SAAS,EAAEN,OAAO,CAAC0B,eAA5B;AAAA,6BACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,YAAP;AAGD;;AAED,MAAIlB,OAAJ,EAAY;AACV,wBAAO;AAAS,MAAA,SAAS,EAAER,OAAO,CAAC2B,aAA5B;AAAA,6BACL;AAAA,kBAAInB;AAAJ;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,YAAP;AAGD;;AAEC,QAAMoB,YAAY,GAAGxB,QAAQ,CAACyB,GAAT,CAAazB,QAAQ,iBAC1C,QAAC,YAAD;AACE,IAAA,EAAE,EAAEA,QAAQ,CAACe,EADf;AAGE,IAAA,IAAI,EAAEf,QAAQ,CAACgB,IAHjB;AAIE,IAAA,WAAW,EAAEhB,QAAQ,CAACiB,WAJxB;AAKE,IAAA,KAAK,EAAEjB,QAAQ,CAACkB;AALlB,KAEOlB,QAAQ,CAACe,EAFhB;AAAA;AAAA;AAAA;AAAA,UADqB,CAArB;AAUA,sBACI;AAAS,IAAA,SAAS,EAAEnB,OAAO,CAACI,QAA5B;AAAA,2BACI,QAAC,IAAD;AAAA,6BACA;AAAA,kBAAKwB;AAAL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAhED;;GAAMzB,iB;;KAAAA,iB;AAkEN,eAAeA,iBAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nimport classes from './AvailableMedicine.module.css';\r\nimport MedicineItem from './MedicineItem/MedicineItem';\r\nimport Card from '../UI/Card';\r\n\r\n\r\n  const AvailableMedicine =()=>{\r\n    const [medicine, setMedicine]=useState([]);\r\n    const [isLoading, setIsLoading] =useState(true);\r\n    const [isError, setIsError] =useState();\r\n\r\n    useEffect(()=>{\r\n      const fetchMedicine = async ()=>{\r\n        \r\n        const response = await fetch('https://medicinedatamart-default-rtdb.firebaseio.com/medicine.json');\r\n        \r\n        if(!response.ok){\r\n          throw('something went wrong in fetch request');\r\n        }\r\n        const responseData = await response.json();\r\n\r\n        const loadedMedicine = [];\r\n        for (const key in responseData){\r\n          loadedMedicine.push({\r\n            id:key,\r\n            name: responseData[key].name,\r\n            description : responseData[key].description,\r\n            price: responseData[key].price\r\n          });\r\n        }\r\n        setMedicine(loadedMedicine);\r\n        setIsLoading(false);\r\n      };\r\n     \r\n      fetchMedicine().catch((error) => {\r\n        setIsLoading(false);\r\n       setIsError(error.message);\r\n      });\r\n      \r\n    },[]);\r\n\r\n    if (isLoading){\r\n      return <section className={classes.medicineloading}>\r\n        <p>....Loading</p>\r\n      </section>\r\n    }\r\n\r\n    if (isError){\r\n      return <section className={classes.medicineerror}>\r\n        <p>{isError}</p>\r\n        </section>\r\n    }\r\n\r\n      const medicineList = medicine.map(medicine => (\r\n      <MedicineItem \r\n        id={medicine.id}\r\n        key={medicine.id} \r\n        name={medicine.name} \r\n        description={medicine.description}\r\n        price={medicine.price}\r\n        />\r\n        ));\r\n\r\n      return(\r\n          <section className={classes.medicine}>\r\n              <Card>\r\n              <ul>{medicineList}</ul>\r\n              </Card>\r\n          </section>\r\n      );\r\n  }\r\n\r\n  export default AvailableMedicine;"]},"metadata":{},"sourceType":"module"}